version: '2.2'
services:

# modified version of docker-compose.thuenen.yml
# for thuenen specific stack and config
# HOST IP SET TO tisdar.thuenen.de
# SSL activated

  django:
    #build: ./docker/geonode/ # build custom geonode with ssl
    build: .
    #image: tisdar/geonode:latest
    image: geonode/geonode:latest
    restart: unless-stopped
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    #tty: true
    labels:
        org.geonode.component: django
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - data-dir-conf

    # Loading the app is defined here to allow for
    # autoreload on changes it is mounted on top of the
    # old copy that docker added when creating the image
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - '.:/usr/src/app'
      - logs_django:/var/log
    environment:
      # django container
      - UWSGI_CMD=uwsgi --ini /usr/src/app/uwsgi.ini
      - IS_CELERY=false
      - C_FORCE_ROOT=1
      # See https://github.com/geosolutions-it/geonode-generic/issues/28
      # to see why we force API version to 1.24
      - DOCKER_API_VERSION="1.24"
    env_file:
      - ./docker/env/production.env


  celery:
    build: .
    #build: ./docker/geonode/ # build custom geonode with ssl
    #image: tisdar/geonode:latest
    image: geonode/geonode:latest
    restart: unless-stopped
    container_name: celery4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    labels:
        org.geonode.component: celery
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /var/run/docker.sock:/var/run/docker.sock
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data      
    environment:
      # celery container
      - CELERY_CMD=celery worker --app=geonode.celery_app:app --broker=amqp://guest:guest@rabbitmq:5672/ -B -l INFO
      - IS_CELERY=true
      - C_FORCE_ROOT=1
      # See https://github.com/geosolutions-it/geonode-generic/issues/28
      # to see why we force API version to 1.24
      - DOCKER_API_VERSION="1.24"
    env_file:
      - ./docker/env/production.env

### actually NGINX ### 
  geonode:
    #build: ./docker/nginx/ # build custom nginx with ssl
    #image: tisdar/nginx:geoserver
    image: geonode/nginx:geoserver
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - celery
      - geoserver
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - statics:/mnt/volumes/statics
      - logs_nginx:/var/log/nginx

  elasticsearch:
    image: elasticsearch:2.4.1
    restart: unless-stopped
    container_name: elasticsearch4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: elasticsearch
        org.geonode.instance.name: geonode

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  geoserver:
    #build: ./docker/geoserver/ # build custom geoserver with ssl
    #image: tisdar/geoserver:2.14x
    image: geonode/geoserver:2.14.x
    
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - data-dir-conf
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - geoserver-data-dir:/geoserver_data/data
    env_file:
      - ./docker/env/production.env

  db:
    image: geonode/postgis:10
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    ports: # forward PostgreSQL port to host
      - "5432:5432"
    env_file:
      - ./docker/env/production.env

  data-dir-conf:
    image: geonode/geoserver_data:2.14.x
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

volumes:
  statics:
    name: ${COMPOSE_PROJECT_NAME}-statics
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /media/data/dockerdata/statics
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /media/data/dockerdata/geoserver
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}-dbdata
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /media/data/dockerdata/dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /media/data/dockerdata/dbbackups
  rabbitmq:
    name: ${COMPOSE_PROJECT_NAME}-rabbitmq
  logs_nginx:
    name: ${COMPOSE_PROJECT_NAME}-logs_nginx
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /media/data/dockerdata/logs/nginx
  logs_django:
    name: ${COMPOSE_PROJECT_NAME}-logs_django
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /media/data/dockerdata/logs/django
